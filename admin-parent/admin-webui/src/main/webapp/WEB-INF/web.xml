<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!-- &lt;!&ndash; 配置ContextLoaderListener &ndash;&gt; -->
    <!-- <context-param> -->
    <!--     <param-name>contextConfigLocation</param-name> -->
    <!--     <param-value>classpath:spring-persist-*.xml</param-value> -->
    <!-- </context-param> -->
    <!-- <listener> -->
    <!--     <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class> -->
    <!-- </listener> -->

    <!-- 配置Filter -->
    <!-- CharacterEncodingFilter -->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 配置Servlet -->
    <!-- DispatcherServlet -->
    <servlet>
        <servlet-name>DispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-*.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>DispatcherServlet</servlet-name>
        <!-- <url-pattern>/</url-pattern> -->
        <!-- <url-pattern>*.jsp</url-pattern> -->
        <url-pattern>*.html</url-pattern>
        <url-pattern>*.json</url-pattern>
        <!-- 为什么要另外再配置json扩展名呢？直接用*.html不可？
             原因：如果一个Ajax请求扩展名是html，但是实际服务器发给浏览器返回的是json数据，二者就不匹配了，会出现406错误码。
             所以为了让Ajax请求能够顺利拿到JSON格式的相应数据，我们另外再配置json扩展名。
         -->
        <!--
            DispatcherServlet的url-pattern配置方式：
            方式一：使用/，拦截所有请求
            方式而：使用请求扩展名配置。如：<url-pattern>*.html</url-pattern>
                优点：1.静态资源xxx.css、xxx.js、xxx.png等完全不经过SpringMVC（就是DispatcherServlet不拦截），所以不需要再配置default-handler-servlet。
                       如果使用/拦截所有请求，那么静态资源还需要配置default-handler-servlet才能正常访问。
                     2.可以实现伪静态的效果：表面上看起来是访问一个HTML文件这样的静态资源，但实际上是经过Java代码运算的结果。
                        伪静态作用：1.给黑客入侵增加难度。
                                  2.有利于SEO优化。
                缺点：不符合RESTFul风格

        -->
    </servlet-mapping>

    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>