<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 扫描handler所在的包 -->
    <context:component-scan base-package="com.starrysea.crowd.mvc"/>

    <!-- 配置SpringMVC的注解驱动 -->
    <!-- 很多功能都依赖于它，所以springMVC一般都需要配置这个
         如：@ControllerAdvice、@ResponseBody、@RequestBody都依赖于SpringMVC这个注解驱动
     -->
    <mvc:annotation-driven/>

    <!-- 配置视图解析器 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- 配置基于XML的异常映射 -->
    <bean id="simpleMappingExceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <!-- 配置异常类型和具体视图页面的对应关系 -->
        <property name="exceptionMappings">
            <props>
                <!-- key属性指定异常的全类名 -->
                <!-- 标签体中写对应的视图，只写视图是因为springMVC会自动根据视图解析器加上前后缀 -->
                <prop key="java.lang.Exception">system-error</prop>
            </props>
        </property>
    </bean>

    <!-- 配置view-controller，直接把请求地址和视图名称关联起来，不必写handler方法了 -->
    <mvc:view-controller path="/admin/to/login/page.html" view-name="admin-login"/>
    <!-- 上面这行相当于在handler加入下面的方法
        @RequestMapping("/admin/to/login/page.html")
        public String toLoginPage(){
            return "admin-login";
        }
    -->
    <mvc:view-controller path="/admin/to/main/page.html" view-name="admin-main"/>
    <mvc:view-controller path="/admin/to/add/page.html" view-name="admin-add"/>
    <mvc:view-controller path="/role/to/page.html" view-name="role-page"/>
    <mvc:view-controller path="/menu/to/page.html" view-name="menu-page"/>

    <!-- &lt;!&ndash; 使用SpringSecurity后，当前自定义的登录拦截器不再使用 &ndash;&gt; -->
    <!-- &lt;!&ndash; 注册拦截器 &ndash;&gt; -->
    <!-- <mvc:interceptors> -->
    <!--     <mvc:interceptor> -->
    <!--         &lt;!&ndash; mvc:mapping是配置好拦截的资源 &ndash;&gt; -->
    <!--         &lt;!&ndash; /*对应一层路径，比如：/aaa &ndash;&gt; -->
    <!--         &lt;!&ndash; /**对应多层路径，比如：/aaa/bbb或/aaa/bbb/ccc或/aaa/bbb/ccc/ddd &ndash;&gt; -->
    <!--         <mvc:mapping path="/**"/> -->

    <!--         &lt;!&ndash; mvc:exclude-mapping配置不拦截的资源 &ndash;&gt; -->
    <!--         <mvc:exclude-mapping path="/admin/to/login/page.html"/> -->
    <!--         <mvc:exclude-mapping path="/admin/do/login.html"/> -->
    <!--         <mvc:exclude-mapping path="/admin/do/logout.html"/> -->
    <!--         &lt;!&ndash; 配置拦截器类 &ndash;&gt; -->
    <!--         <bean class="com.starrysea.crowd.mvc.interceptor.LoginInterceptor"/> -->
    <!--     </mvc:interceptor> -->
    <!-- </mvc:interceptors> -->
</beans>